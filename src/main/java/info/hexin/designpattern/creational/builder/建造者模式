//new Rectangle.Builder().height(250).width(300).color(PINK).build();

定义
　　将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示，这样的设计模式被称为建造者模式。
实用范围
　　1 当创建复杂对象的算法应该独立于该对象的组成部分以及它们的装配方式时。
　　2 当构造过程必须允许被构造的对象有不同表示时。

角色
　　在这样的设计模式中，有以下几个角色：
　　1 builder：为创建一个产品对象的各个部件指定抽象接口。
　　2 ConcreteBuilder：实现Builder的接口以构造和装配该产品的各个部件，定义并明确它所创建的表示，并提供一个检索产品的接口。
　　3 Director：构造一个使用Builder接口的对象。
　　4 Product：表示被构造的复杂对象。ConcreteBuilder创建该产品的内部表示并定义它的装配过程，包含定义组成部件的类，包括将这些部件装配成最终产品的接口。

建造者模式与工厂模式的区别
       我们可以看到，建造者模式与工厂模式是极为相似的，总体上，建造者模式仅仅只比工厂模式多了一个“导演类”的角色。在建造者模式的类图中，假如把这个导演类看做是最终调用的客户端，那么图中剩余的部分就可以看作是一个简单的工厂模式了。
       与工厂模式相比，建造者模式一般用来创建更为复杂的对象，因为对象的创建过程更为复杂，因此将对象的创建过程独立出来组成一个新的类——导演类。
       也就是说，工厂模式是将对象的全部创建过程封装在工厂类中，由工厂类向客户端提供最终的产品；
       而建造者模式中，建造者类一般只提供产品类中各个组件的建造，而将具体建造过程交付给导演类。
       由导演类负责将各个组件按照特定的规则组建为产品，然后将组建好的产品交付给客户端。
       
       
抽象工厂模式好处
     往往在设计中好移植,可以在数据库的封装提供上方便.类与类之间没有直接的联系,而是渐接的进行联系.
    例如:在自已写的程序中,往往要SQLserver与Oracle之间都能运行.这就用到了抽象工厂模式.


建造者模式好处
    在设计中有时要创建一个复杂的对象,往往又是由子对象组成的.
    例如:我们把电脑看成一个复杂的对象,电脑里面又有CPU,内存,硬盘,等对象.这样才能组装成电脑.
    在抽象工厂和建造者模式结合时,抽象工厂负责的是我是要组装笔记本,还是台式机.二者可以随意.