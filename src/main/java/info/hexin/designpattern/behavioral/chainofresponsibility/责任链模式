责任链模式定义：
阎宏的定义："发出这个请求的客户端并不知道链上的那一个对象最终处理这个请求,这使得系统可以在不影响客户端的情况下动态地重新组织链和分配责任."

阎宏的定义很精炼，但是太精炼的以至于很多人很难理解。
定义分解如下：
1 服务端有一组策略（也可以称之为方法，算法等等）按顺序处理请求。这组策略的组织顺序与客户端无关。
2 当这组策略中的某一个策略满足结束条件时，整个责任链结束。

解释：责任链模式可以被认为是“策略对象顺序执行”。在一个顺序策略链表中的策略按顺序被调用。当某种策略满足要求，就返回成功标志或者责任链结束。

CoR的优点：
因为无法预知来自外界（客户端）的请求是属于哪种类型，每个类如果碰到它不能处理的请求只要放弃就可以。

缺点是效率低，因为一个请求的完成可能要遍历到最后才可能完成，当然也可以用树的概念优化。 在Java AWT1.0中，对于鼠标按键事情的处理就是使用CoR,到Java.1.1以后，就使用Observer代替CoR

扩展性差，因为在CoR中，一定要有一个统一的接口Handler.局限性就在这里。

与Command模式区别：

Command 模式需要事先协商客户端和服务器端的调用关系，比如 1 代表 start 2 代表 move 等，这些 都是封装在 request 中，到达服务器端再分解。


CoR 模式就无需这种事先约定，服务器端可以使用 CoR 模式进行客户端请求的猜测，一个个猜测 试验。
